// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{METHOD_ELF, METHOD_ID};
use risc0_zkvm::{default_prover, ExecutorEnv, LocalProver, Prover, ProverOpts};

fn main() -> anyhow::Result<()> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let prover_a = LocalProver::new("test");
    let prover_b = default_prover();

    let env = ExecutorEnv::builder()
        .write(&None::<(Vec<u8>, [u32; 8])>)?
        .build()?;

    let prove_info = prover_a.prove(env, METHOD_ELF)?;

    let receipt = prove_info.receipt;
    receipt.verify(METHOD_ID).unwrap();

    let env = ExecutorEnv::builder()
        .write(&Some((&receipt.journal.bytes, METHOD_ID)))?
        .add_assumption(receipt)
        .build()?;

    let prove_info = prover_b.prove(env, METHOD_ELF)?;

    let receipt = prove_info.receipt;
    receipt.verify(METHOD_ID).unwrap();
    Ok(())
}
